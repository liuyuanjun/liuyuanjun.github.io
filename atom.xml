<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YJ&#39;s Blog</title>
  
  
  <link href="https://liuyuanjun.com/atom.xml" rel="self"/>
  
  <link href="https://liuyuanjun.com/"/>
  <updated>2023-03-04T11:24:00.000Z</updated>
  <id>https://liuyuanjun.com/</id>
  
  <author>
    <name>YJ Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cloudflare折腾备忘</title>
    <link href="https://liuyuanjun.com/cloudflare-memo/"/>
    <id>https://liuyuanjun.com/cloudflare-memo/</id>
    <published>2023-03-04T11:24:00.000Z</published>
    <updated>2023-03-04T11:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用cloudflare尝试穿透中国移动宽带内网搭建外网可访问服务折腾记录"><a href="#用cloudflare尝试穿透中国移动宽带内网搭建外网可访问服务折腾记录" class="headerlink" title="用cloudflare尝试穿透中国移动宽带内网搭建外网可访问服务折腾记录"></a>用cloudflare尝试穿透中国移动宽带内网搭建外网可访问服务折腾记录</h2><p>移动宽带价格较便宜，但是没有公网IPv4地址，所以一般的DDNS服务难以解决外网访问问题，经过一番设置，设置了IPv6 DDNS，外网可以访问了，但是访问需要客户侧网络支持IPv6，所以还是不够完美，于是开始了cloudflare折腾之旅。</p><h3 id="1-用cloudflare的免费CDN服务解决IPv4用户访问问题"><a href="#1-用cloudflare的免费CDN服务解决IPv4用户访问问题" class="headerlink" title="1. 用cloudflare的免费CDN服务解决IPv4用户访问问题"></a>1. 用cloudflare的免费CDN服务解决IPv4用户访问问题</h3><p>这个很简单，只要把域名托管到cloudflare，然后在cloudflare的DNS设置里面添加一条A记录，指向服务器IP地址，然后在cloudflare的CDN设置里面开启CDN服务，就可以了。<br>折腾过程中有个坑，就是cloudflare的回源端口是有限制的，只支持几个固定的端口，如下：</p><table><thead><tr><th align="center"><strong>HTTP:</strong></th><th align="center">80</th><th align="center">8080</th><th align="center">8880</th><th align="center">2052</th><th align="center">2082</th><th align="center">2086</th><th align="center">2095</th></tr></thead><tbody><tr><td align="center"><strong>HTTPS:</strong></td><td align="center">443</td><td align="center">8443</td><td align="center"></td><td align="center">2053</td><td align="center">2083</td><td align="center">2087</td><td align="center">2096</td></tr></tbody></table><h3 id="2-尝试将服务端口转为正常的HTTPS服务端口-443"><a href="#2-尝试将服务端口转为正常的HTTPS服务端口-443" class="headerlink" title="2. 尝试将服务端口转为正常的HTTPS服务端口 443"></a>2. 尝试将服务端口转为正常的HTTPS服务端口 443</h3><p>国内的民用宽带80，443端口都是被封的，cloudflare CDN服务也是同端口访问，所以考虑到搞个反向代理，将服务端口转为正常的HTTPS服务端口 443。</p><h4 id="2-1-尝试使用cloudflare的Workers"><a href="#2-1-尝试使用cloudflare的Workers" class="headerlink" title="2.1 尝试使用cloudflare的Workers"></a>2.1 尝试使用cloudflare的Workers</h4><p>这里用到了 <a href="https://reflare.js.org/">reflare</a> 这个项目，这个项目是一个cloudflare的worker，一番折腾做好路由后，以失败告终。本次失败粗略得出两个结论（可能有误，求指正）：</p><ol><li>cloudflare的worker不支持访问IPv6</li><li>cloudflare的worker不支持访问cloudflare的CDN服务</li></ol><h4 id="2-2-尝试使用cloudflare的Tunnel"><a href="#2-2-尝试使用cloudflare的Tunnel" class="headerlink" title="2.2 尝试使用cloudflare的Tunnel"></a>2.2 尝试使用cloudflare的Tunnel</h4><p>未完待续…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;用cloudflare尝试穿透中国移动宽带内网搭建外网可访问服务折腾记录&quot;&gt;&lt;a href=&quot;#用cloudflare尝试穿透中国移动宽带内网搭建外网可访问服务折腾记录&quot; class=&quot;headerlink&quot; title=&quot;用cloudflare尝试穿透中国移动宽</summary>
      
    
    
    
    
    <category term="cloudflare" scheme="https://liuyuanjun.com/tags/cloudflare/"/>
    
    <category term="内网穿透" scheme="https://liuyuanjun.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mac常用快捷键及命令备忘</title>
    <link href="https://liuyuanjun.com/my-mac-shortcut-memo/"/>
    <id>https://liuyuanjun.com/my-mac-shortcut-memo/</id>
    <published>2023-03-01T04:42:47.000Z</published>
    <updated>2023-03-01T04:56:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="个人常用快捷键备忘，只记录Mac"><a href="#个人常用快捷键备忘，只记录Mac" class="headerlink" title="个人常用快捷键备忘，只记录Mac"></a>个人常用快捷键备忘，只记录Mac</h2><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><blockquote><p>Cmd+Shift+T 重新打开最后关闭的标签页<br>Alt+Cmd+L 打开下载列表</p></blockquote><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><blockquote><p><code>time cmd</code> 显示命令执行时间<br>Ctrl+U 删除光标左边输入内容<br>Ctrl+K 删除光标右边输入内容</p></blockquote><h3 id="idea-IDE"><a href="#idea-IDE" class="headerlink" title="idea IDE"></a>idea IDE</h3><blockquote><p>Cmd+[   OR  Command+Alt+←  光标回到上一个位置<br>Ctrl+G 选择下一个一样的</p></blockquote><h3 id="Docker-命令"><a href="#Docker-命令" class="headerlink" title="Docker 命令"></a>Docker 命令</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;个人常用快捷键备忘，只记录Mac&quot;&gt;&lt;a href=&quot;#个人常用快捷键备忘，只记录Mac&quot; class=&quot;headerlink&quot; title=&quot;个人常用快捷键备忘，只记录Mac&quot;&gt;&lt;/a&gt;个人常用快捷键备忘，只记录Mac&lt;/h2&gt;&lt;h3 id=&quot;Chrome&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="shortcut" scheme="https://liuyuanjun.com/tags/shortcut/"/>
    
  </entry>
  
  <entry>
    <title>Docker 中 ENTRYPOINT 与 CMD 的执行关系</title>
    <link href="https://liuyuanjun.com/docker-how-to-use-entrypoint-cmd/"/>
    <id>https://liuyuanjun.com/docker-how-to-use-entrypoint-cmd/</id>
    <published>2023-02-28T11:51:36.000Z</published>
    <updated>2023-03-01T01:34:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ENTRYPOINT-与-CMD-如何配合使用"><a href="#ENTRYPOINT-与-CMD-如何配合使用" class="headerlink" title="ENTRYPOINT 与 CMD 如何配合使用"></a>ENTRYPOINT 与 CMD 如何配合使用</h2><table><thead><tr><th></th><th>No ENTRYPOINT</th><th>ENTRYPOINT exec_entry p1_entry</th><th>ENTRYPOINT [“exec_entry”, “p1_entry”]</th></tr></thead><tbody><tr><td>No CMD</td><td>error, not allowed</td><td>&#x2F;bin&#x2F;sh -c exec_entry p1_entry</td><td>exec_entry p1_entry</td></tr><tr><td>CMD [“exec_cmd”, “p1_cmd”]</td><td>exec_cmd p1_cmd</td><td>&#x2F;bin&#x2F;sh -c exec_entry p1_entry</td><td>exec_entry p1_entry exec_cmd p1_cmd</td></tr><tr><td>CMD exec_cmd p1_cmd</td><td>&#x2F;bin&#x2F;sh -c exec_cmd p1_cmd</td><td>&#x2F;bin&#x2F;sh -c exec_entry p1_entry</td><td>exec_entry p1_entry &#x2F;bin&#x2F;sh -c exec_cmd p1_cmd</td></tr></tbody></table><p><strong>一句话抓重点：</strong> 如果 ENTRYPOINT 设置没有使用数组方式，CMD不会被执行</p><hr><hr><h2 id="ENTRYPOINT-与-CMD-的各种覆写情况"><a href="#ENTRYPOINT-与-CMD-的各种覆写情况" class="headerlink" title="ENTRYPOINT 与 CMD 的各种覆写情况"></a>ENTRYPOINT 与 CMD 的各种覆写情况</h2><h3 id="在同一-buildstage-覆写时"><a href="#在同一-buildstage-覆写时" class="headerlink" title="在同一 buildstage 覆写时"></a>在同一 buildstage 覆写时</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> busybox</span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;foo %d bar\n&quot;</span>, <span class="string">&quot;1&quot;</span>] <span class="comment"># 被保留</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>] <span class="comment"># 被覆盖</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;printf&quot;</span>] <span class="comment"># 被保留</span></span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建</span></span><br><span class="line">docker build --no-cache -t overridden .</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行</span></span><br><span class="line">docker run overridden</span><br><span class="line">foo 1 bar</span><br></pre></td></tr></table></figure><p>运行镜像显示使用了：printf</p><h3 id="在运行时覆写-（-entrypoint"><a href="#在运行时覆写-（-entrypoint" class="headerlink" title="在运行时覆写 （--entrypoint)"></a>在运行时覆写 （<code>--entrypoint</code>)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --entrypoint=<span class="string">&quot;echo&quot;</span> overridden</span><br><span class="line"><span class="comment"># 没有输出 (CMD已被重置)</span></span><br></pre></td></tr></table></figure><p>可以通过传参来设置新的CMD：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --entrypoint=<span class="string">&quot;echo&quot;</span> overridden thisisthenewcommand</span><br><span class="line">thisisthenewcommand</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="在子镜像覆写-（FROM"><a href="#在子镜像覆写-（FROM" class="headerlink" title="在子镜像覆写 （FROM ..)"></a>在子镜像覆写 （FROM ..)</h3><p>构建扩展新镜像时，将重置：CMD</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> overridden</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --no-cache -t overridden2 .</span><br></pre></td></tr></table></figure><p>运行显示 已重置CMD</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run overridden2</span><br><span class="line"><span class="comment"># empty output (because CMD is reset)</span></span><br></pre></td></tr></table></figure><h3 id="在多阶段构建中覆盖"><a href="#在多阶段构建中覆盖" class="headerlink" title="在多阶段构建中覆盖"></a>在多阶段构建中覆盖</h3><p>在多阶段构建中，情况与构建扩展镜像时情况相同（只是在单个 Dockerfile 中完成）;</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> busybox AS stage1</span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;foo %d bar\n&quot;</span>, <span class="string">&quot;1&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;printf&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> stage1</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --no-cache -t overridden3 .</span><br></pre></td></tr></table></figure><p>运行镜像显示已使用，但已重置：<code>echo cmd</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run overridden3</span><br><span class="line"><span class="comment"># empty output (because CMD is reset)</span></span><br></pre></td></tr></table></figure><hr><p><strong>参考资料：</strong><br><a href="https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact">https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact</a><br><a href="https://github.com/docker/docs/issues/6142#issuecomment-370368332">https://github.com/docker/docs/issues/6142#issuecomment-370368332</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ENTRYPOINT-与-CMD-如何配合使用&quot;&gt;&lt;a href=&quot;#ENTRYPOINT-与-CMD-如何配合使用&quot; class=&quot;headerlink&quot; title=&quot;ENTRYPOINT 与 CMD 如何配合使用&quot;&gt;&lt;/a&gt;ENTRYPOINT 与 CMD 如何配合使用&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;No ENTRYPOINT&lt;/th&gt;
&lt;th&gt;ENTRYPOINT exec_entry p1_entry&lt;/th&gt;
&lt;th&gt;ENTRYPOINT [“exec_entry”, “p1_entry”]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;No CMD&lt;/td&gt;
&lt;td&gt;error, not allowed&lt;/td&gt;
&lt;td&gt;&amp;#x2F;bin&amp;#x2F;sh -c exec_entry p1_entry&lt;/td&gt;
&lt;td&gt;exec_entry p1_entry&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CMD [“exec_cmd”, “p1_cmd”]&lt;/td&gt;
&lt;td&gt;exec_cmd p1_cmd&lt;/td&gt;
&lt;td&gt;&amp;#x2F;bin&amp;#x2F;sh -c exec_entry p1_entry&lt;/td&gt;
&lt;td&gt;exec_entry p1_entry exec_cmd p1_cmd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CMD exec_cmd p1_cmd&lt;/td&gt;
&lt;td&gt;&amp;#x2F;bin&amp;#x2F;sh -c exec_cmd p1_cmd&lt;/td&gt;
&lt;td&gt;&amp;#x2F;bin&amp;#x2F;sh -c exec_entry p1_entry&lt;/td&gt;
&lt;td&gt;exec_entry p1_entry &amp;#x2F;bin&amp;#x2F;sh -c exec_cmd p1_cmd&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;一句话抓重点：&lt;/strong&gt; 如果 ENTRYPOINT 设置没有使用数组方式，CMD不会被执行&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&quot;ENTRYPOINT-与-CMD-的各种覆写情况&quot;&gt;&lt;a href=&quot;#ENTRYPOINT-与-CMD-的各种覆写情况&quot; class=&quot;headerlink&quot; title=&quot;ENTRYPOINT 与 CMD 的各种覆写情况&quot;&gt;&lt;/a&gt;ENTRYPOINT 与 CMD 的各种覆写情况&lt;/h2&gt;&lt;h3 id=&quot;在同一-buildstage-覆写时&quot;&gt;&lt;a href=&quot;#在同一-buildstage-覆写时&quot; class=&quot;headerlink&quot; title=&quot;在同一 buildstage 覆写时&quot;&gt;&lt;/a&gt;在同一 buildstage 覆写时&lt;/h3&gt;&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; busybox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt; [&lt;span class=&quot;string&quot;&gt;&amp;quot;foo %d bar\n&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;# 被保留&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt; [&lt;span class=&quot;string&quot;&gt;&amp;quot;echo&amp;quot;&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;# 被覆盖&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt; [&lt;span class=&quot;string&quot;&gt;&amp;quot;printf&amp;quot;&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;# 被保留&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 构建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker build --no-cache -t overridden .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 运行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run overridden&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo 1 bar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;运行镜像显示使用了：printf&lt;/p&gt;
&lt;h3 id=&quot;在运行时覆写-（-entrypoint&quot;&gt;&lt;a href=&quot;#在运行时覆写-（-entrypoint&quot; class=&quot;headerlink&quot; title=&quot;在运行时覆写 （--entrypoint)&quot;&gt;&lt;/a&gt;在运行时覆写 （&lt;code&gt;--entrypoint&lt;/code&gt;)&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run --entrypoint=&lt;span class=&quot;string&quot;&gt;&amp;quot;echo&amp;quot;&lt;/span&gt; overridden&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 没有输出 (CMD已被重置)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以通过传参来设置新的CMD：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run --entrypoint=&lt;span class=&quot;string&quot;&gt;&amp;quot;echo&amp;quot;&lt;/span&gt; overridden thisisthenewcommand&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;thisisthenewcommand&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="docker" scheme="https://liuyuanjun.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Github kex_exchange_identification 问题</title>
    <link href="https://liuyuanjun.com/github-connect-error-kex_exchange_identification-time_out/"/>
    <id>https://liuyuanjun.com/github-connect-error-kex_exchange_identification-time_out/</id>
    <published>2023-02-27T07:54:30.000Z</published>
    <updated>2023-02-27T11:20:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Github 报错如下:</strong></p><blockquote><p>kex_exchange_identification: Connection closed by remote host<br>fatal: Could not read from remote repository.</p><p>Please make sure you have the correct access rights<br>and the repository exists.</p></blockquote><p><strong>解决方法如下：</strong></p><p>编辑 <code>~/.ssh/config</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line"> Hostname ssh.github.com</span><br><span class="line"> Port 443</span><br></pre></td></tr></table></figure><p><strong>参考文档：</strong></p><blockquote><p><a href="https://stackoverflow.com/a/60994276">https://stackoverflow.com/a/60994276</a></p></blockquote><hr><p>后面频繁出现 time out，解决方法，加代理</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必须是 github.com</span></span><br><span class="line">Host github.com</span><br><span class="line">   HostName github.com</span><br><span class="line">   User git</span><br><span class="line">   <span class="comment"># 走 HTTP 代理</span></span><br><span class="line">   <span class="comment"># ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=8080</span></span><br><span class="line">   <span class="comment"># 走 socks5 代理（如小飞机 or V2xxx）</span></span><br><span class="line">   ProxyCommand nc -v -x 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure><p><strong>参考文档：</strong></p><blockquote><p><a href="https://blog.csdn.net/HD243608836/article/details/127869482">https://blog.csdn.net/HD243608836/article/details/127869482</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Github 报错如下:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;kex_exchange_identification: Connection closed by remote host&lt;br&gt;fatal: Could not read </summary>
      
    
    
    
    
    <category term="github" scheme="https://liuyuanjun.com/tags/github/"/>
    
    <category term="ssh" scheme="https://liuyuanjun.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Hexo使用备忘</title>
    <link href="https://liuyuanjun.com/hexo-memo/"/>
    <id>https://liuyuanjun.com/hexo-memo/</id>
    <published>2023-02-27T07:51:19.000Z</published>
    <updated>2023-03-01T08:20:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="去除yilia主题中失效的统计访问"><a href="#去除yilia主题中失效的统计访问" class="headerlink" title="去除yilia主题中失效的统计访问"></a>去除yilia主题中失效的统计访问</h2><p>使用yilia主题打开网站会有个 <code>https://litten.me:9005/badjs/?id=1&amp;uin=xxxxxx</code> 的访问一直转圈，主题作者最后维护已经是N年前，这个统计链接也早已失效<br>查找了一下，代码在<code>themes/yilia/source-src/js/report.js</code>，但这里是源码，实际使用的是编译后的文件，所以更改这里并不能解决问题</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>文件：<code>themes/yilia/source/main.0cf68a.js</code></p><p>查找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192</span>:<span class="keyword">function</span>(<span class="params">e,t,n</span>)&#123;<span class="string">&quot;use strict&quot;</span>;<span class="keyword">function</span> <span class="title function_">o</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> t=<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;(^|&amp;)&quot;</span>+e+<span class="string">&quot;=([^&amp;]*)(&amp;|$)&quot;</span>,<span class="string">&quot;i&quot;</span>),n=<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>).<span class="title function_">match</span>(t);<span class="keyword">return</span> <span class="literal">null</span>!=n?<span class="built_in">unescape</span>(n[<span class="number">2</span>]):<span class="literal">null</span>&#125;<span class="keyword">var</span> r=<span class="title function_">n</span>(<span class="number">388</span>);<span class="keyword">if</span>(<span class="title function_">n</span>(<span class="number">197</span>),<span class="variable language_">window</span>.<span class="property">BJ_REPORT</span>)&#123;<span class="variable constant_">BJ_REPORT</span>.<span class="title function_">init</span>(&#123;<span class="attr">id</span>:<span class="number">1</span>&#125;),<span class="variable constant_">BJ_REPORT</span>.<span class="title function_">init</span>(&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">uin</span>:<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">origin</span>,<span class="attr">combo</span>:<span class="number">0</span>,<span class="attr">delay</span>:<span class="number">1e3</span>,<span class="attr">url</span>:<span class="string">&quot;//litten.me:9005/badjs/&quot;</span>,<span class="attr">ignore</span>:[<span class="regexp">/Script error/i</span>],<span class="attr">random</span>:<span class="number">1</span>,<span class="attr">repeat</span>:<span class="number">5e5</span>,<span class="attr">onReport</span>:<span class="keyword">function</span>(<span class="params">e,t</span>)&#123;&#125;,<span class="attr">ext</span>:&#123;&#125;&#125;);<span class="keyword">var</span> i=<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span>,a=top===<span class="variable language_">window</span>,u=!(<span class="regexp">/localhost/i</span>.<span class="title function_">test</span>(i)||<span class="regexp">/127.0.0.1/i</span>.<span class="title function_">test</span>(i)||<span class="regexp">/0.0.0.0/i</span>.<span class="title function_">test</span>(i));a&amp;&amp;u&amp;&amp;<span class="variable constant_">BJ_REPORT</span>.<span class="title function_">report</span>(<span class="string">&quot;yilia-&quot;</span>+<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span>);<span class="keyword">var</span> l=<span class="title function_">o</span>(<span class="string">&quot;f&quot;</span>),c=<span class="string">&quot;yilia-from&quot;</span>;l?(a&amp;&amp;<span class="variable constant_">BJ_REPORT</span>.<span class="title function_">report</span>(<span class="string">&quot;from-&quot;</span>+l),r.<span class="title function_">set</span>(c,l)):<span class="variable language_">document</span>.<span class="property">referrer</span>.<span class="title function_">indexOf</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span>)&gt;=<span class="number">0</span>?(l=r.<span class="title function_">get</span>(c),l&amp;&amp;a&amp;&amp;<span class="variable constant_">BJ_REPORT</span>.<span class="title function_">report</span>(<span class="string">&quot;from-&quot;</span>+l)):r.<span class="title function_">remove</span>(c)&#125;e.<span class="property">exports</span>=&#123;<span class="attr">init</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;&#125;&#125;,</span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192</span>:<span class="keyword">function</span>(<span class="params">e,t,n</span>)&#123;&#125;,</span><br></pre></td></tr></table></figure><hr><hr><h2 id="yilia主题左侧作者名字（author）和-子标题（subtitle）的显示"><a href="#yilia主题左侧作者名字（author）和-子标题（subtitle）的显示" class="headerlink" title="yilia主题左侧作者名字（author）和 子标题（subtitle）的显示"></a>yilia主题左侧作者名字（author）和 子标题（subtitle）的显示</h2><p><img src="/assets/img/article/author_subtitle.png" alt="author-subtitle.png"></p><p>这个配置文件中没有介绍到，很简单，在 <code>themes/yilia/_config.yml</code> 中加入一下两项即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 作者</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">&#x27;YJ.Liu&#x27;</span></span><br><span class="line"><span class="comment"># 子标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;个人博客&#x27;</span></span><br></pre></td></tr></table></figure><hr><hr><h2 id="yilia主题bug，Front-matter中设置permalink『所有文章』列表的文章链接错误"><a href="#yilia主题bug，Front-matter中设置permalink『所有文章』列表的文章链接错误" class="headerlink" title="yilia主题bug，Front-matter中设置permalink『所有文章』列表的文章链接错误"></a>yilia主题bug，Front-matter中设置permalink『所有文章』列表的文章链接错误</h2><p>原因就是Front-matter中设置 <code>permalink</code> 后，<code>content.json</code> 返回的数据中 <code>path</code> 比没有设置的左边多了个 <code>/</code></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>源文件位置 <code>themes/yilia/source-src/js/slider.js</code> 85行，代码修改如下，修改位置见注释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">urlformat</span>: <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    str = str.<span class="title function_">replace</span>(<span class="regexp">/^\/+/</span>,<span class="string">&#x27;&#x27;</span>) <span class="comment">// &lt;= 增加了这一行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">yiliaConfig</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">yiliaConfig</span>.<span class="property">root</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">yiliaConfig</span>.<span class="property">root</span> + str</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;/&#x27;</span> + str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>同样的，这里是原始文件，修改这里是无法生效的，所以需要在编译文件中替换如下：</strong></p><p>文件位置：<code>themes/yilia/source/slider.e37972.js</code></p><p>查找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">urlformat</span>:<span class="keyword">function</span>(<span class="params">t</span>)&#123;<span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">yiliaConfig</span>&amp;&amp;<span class="variable language_">window</span>.<span class="property">yiliaConfig</span>.<span class="property">root</span>?<span class="variable language_">window</span>.<span class="property">yiliaConfig</span>.<span class="property">root</span>+<span class="attr">t</span>:<span class="string">&quot;/&quot;</span>+t&#125;</span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">urlformat</span>:<span class="keyword">function</span>(<span class="params">t</span>)&#123;t=t.<span class="title function_">replace</span>(<span class="regexp">/^\/+/</span>,<span class="string">&#x27;&#x27;</span>);<span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">yiliaConfig</span>&amp;&amp;<span class="variable language_">window</span>.<span class="property">yiliaConfig</span>.<span class="property">root</span>?<span class="variable language_">window</span>.<span class="property">yiliaConfig</span>.<span class="property">root</span>+<span class="attr">t</span>:<span class="string">&quot;/&quot;</span>+t&#125;</span><br></pre></td></tr></table></figure><hr><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;去除yilia主题中失效的统计访问&quot;&gt;&lt;a href=&quot;#去除yilia主题中失效的统计访问&quot; class=&quot;headerlink&quot; title=&quot;去除yilia主题中失效的统计访问&quot;&gt;&lt;/a&gt;去除yilia主题中失效的统计访问&lt;/h2&gt;&lt;p&gt;使用yilia主题打</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://liuyuanjun.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://liuyuanjun.com/hello-world/"/>
    <id>https://liuyuanjun.com/hello-world/</id>
    <published>2023-02-24T11:11:35.000Z</published>
    <updated>2023-03-04T11:59:35.051Z</updated>
    
    <content type="html"><![CDATA[<p>年龄渐长，记忆衰退</p><p>构建了一个Blog，记一些东西备忘</p><p>希望我记的东西恰好也能帮到你</p><p>博客构建使用<a href="https://hexo.io/">Hexo</a>，部署于<a href="https://vercel.com/liuyuanjun">Vercel</a>，同时部署于<a href="https://liuyuanjun.github.io/">Github.io</a>备用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;年龄渐长，记忆衰退&lt;/p&gt;
&lt;p&gt;构建了一个Blog，记一些东西备忘&lt;/p&gt;
&lt;p&gt;希望我记的东西恰好也能帮到你&lt;/p&gt;
&lt;p&gt;博客构建使用&lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;，部署于&lt;a href=&quot;https://vercel.com/</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://liuyuanjun.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
